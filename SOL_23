// SPDX-License-Identifier: MIT
pragma solidity  ^0.8.19;

// INHERITANCE
/*
   Solidity supports multiple inheitance.Contract can inherit other contract by using the [ IS ] keyword.
   Function that is going to be overridden by a child, then the parent contract must be declared as [ VIRTUAL ].
   Functio that is going to override a parent function must use the keyword [ OVERRIDE ].
*/

/*
  Solidity lets developers change how a function in the parent contract 
  is implemented in the derived class. This is known as function overriding.
  The function in the parent contract needs to be declared with the keyword 
  [VIRTUAL] to indicate that it can be overridden in the deriving contract.
*/


// Parent contract must represent virtual, if it's going to overriden.
contract A{
        function fooA()public pure virtual returns(string memory){
            return "A CONTRACT";
        }
}
//Contract inherit other contracts by using the keyword 'IS'.
contract B is A{
    // Override A.fooA()
    function fooA() public pure virtual override returns(string memory){
       return "B";
    }
}
contract C is A{
    // Override A.fooA()
    function fooA()public pure virtual override returns(string memory){
        return "C";
    }
}

/* Contract can inherit from multiple parent contracts.
   when a function is called that is defined multiple times in
   -different contracts, parent contracts are searched from
   -Right to Left , and in Depth-First Manner.
*/

contract D is B,C{// (B-LEFT, C-RIGHT)
    //D.foo() => returns "C".
    // Because it is very near to D [ Right most Side ]
    function fooA() public pure override(B,C) returns (string memory){
        return super.fooA();
    }
}
contract E is C,B{
    function fooA()public pure override(B,C)returns(string memory){
        return super.fooA();
    }
}
