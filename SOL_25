// SPDX-License-Identifier: MIT
pragma solidity  >=0.8.0 <0.8.23;
// SuperKeyWord .
// Used to derive the parent contract

// super.(parent contract name)- that help to access anywhere.
contract A{
    event log(string message);
    function foo()public virtual{
    emit log("A.foo is called");
    }
    function bar() public virtual{
        emit log("A.bar is called");
    }
}
contract B is A{
    function foo()public virtual override{
        emit log("B.foo is called");
        // A.foo();
    }
    function bar()public virtual override{
        emit log("B.bar is called");
        // super.bar();
        // Here, Instead of using (A),using [SUPER] also works 
        // same way, it helps to inherit the parent contract.
    }
}
contract C is A{
    function foo()public virtual override{
        emit log("C.foo is called");
        A.foo();
    }
    function bar()public virtual override{
        emit log("C.bar is called");
        super.bar();
    }
}
// It is must, to do update all function in parent contract
// -else shows error.
contract D is B,C{
    function foo()public override(B,C){
        super.foo();
    }
    function bar()public override(B,C){
        super.bar();
    }
}
